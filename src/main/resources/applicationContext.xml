<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://cxf.apache.org/jaxrs
        http://cxf.apache.org/schemas/jaxrs.xsd
        http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd
        http://camel.apache.org/schema/cxf
        http://camel.apache.org/schema/cxf/camel-cxf.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    ">

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />


    <!-- TODO: autowire with below -->
    <!--<context:component-scan base-package="org.camelapp.dao" />-->
    <!--<context:annotation-config />-->


    <!-- === Route(s) ==== -->
    <camel:camelContext trace="true" xmlns="http://camel.apache.org/schema/spring">
        <dataFormats>
            <xmljson id="xmljson"/>
            <xmljson id="xmljsonWithOptions" forceTopLevelObject="true" trimSpaces="true" rootName="root" skipNamespaces="true"
                     removeNamespacePrefixes="true" expandableProperties="d e"/>
        </dataFormats>

        <route>
            <from uri="cxfrs:bean:photoAPIServer?bindingStyle=SimpleConsumer"/>
            <choice>
                <when>
                    <simple>${header.operationName} == 'getPhoto'</simple>
                    <bean ref="photoService" method="getPhoto"/>
                </when>
            </choice>
        </route>

        <route>
            <from uri="cxf:bean:photoWS"/>
            <marshal ref="xmljsonWithOptions"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <!-- TODO: replace "image001" with name parameter -->
            <to uri="http://localhost:8080/api/photos/image001"/>
            <unmarshal ref="xmljsonWithOptions" />
        </route>
    </camel:camelContext>


    <!-- Define the real JAX-RS back end service  -->
    <jaxrs:server id="photoAPIServer"
                  address="/api"
                  serviceClass="org.camelapp.restapi.PhotoResource">
        <jaxrs:providers>
            <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider">
                <property name="mapper" ref="jsonMapper"/>
            </bean>
        </jaxrs:providers>
    </jaxrs:server>

    <!-- Define the JAX-WS back end service -->
    <cxf:cxfEndpoint id="photoWS" address="/soap" serviceClass="org.camelapp.soapapi.PhotoEndpoint">
        <cxf:properties>
            <entry key="dataFormat" value="MESSAGE"/>
        </cxf:properties>
    </cxf:cxfEndpoint>

    <bean id="photoService" class="org.camelapp.service.PhotoService">
        <property name="photoDAO" ref="photoDAO" />
    </bean>

    <bean id="jsonMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
        <property name="serializationInclusion" value="NON_NULL" />
    </bean>


    <bean id="photoDAO" class="org.camelapp.dao.PhotoDAO" />

    <!--<jdbc:embedded-database id="embedded-datasource" type="DERBY">-->
        <!--<jdbc:script location="classpath:schema.sql"/>-->
        <!--<jdbc:script location="classpath:data.sql"/>-->
    <!--</jdbc:embedded-database>-->

    <bean id="embedded-datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
        <property name="url" value="jdbc:derby:memory:mydb;create=true" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="packagesToScan" value="org.camelapp" />
        <property name="dataSource" ref="embedded-datasource" />
        <property name="persistenceXmlLocation" value="classpath:persistence.xml" />
        <property name="persistenceUnitName" value="persistenceUnit" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="showSql" value="true" />
                <!--<property name="generateDdl" value="${jpa.generateDdl}" />-->
                <!--<property name="databasePlatform" value="org.hibernate.dialect.DerbyDialect" />-->
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
    </bean>

    <!-- bean post-processing for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />


</beans>